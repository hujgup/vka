none {
	name = modus:noneName
	desc = modus:noneDesc
	insertion {
	}
	removal {
	}
	colors {
		topBg = #7f1f1f
		bottomBg = #bcbcbc
		text = #e8d400
	}
}

## Standard moduses
stack {
	name = modus:stackName
	desc = modus:stackDesc
	insertion {
		front
	}	
	removal {
		front
	}
	colors {
		topBg = #9a2446
		bottomBg = #ff067c
		text = #fe99ab
	}
}
queue {
	name = modus:queueName
	desc = modus:queueDesc
	insertion {
		front
	}
	removal {
		back
	}
	colors {
		topBg = #cf560c
		bottomBg = #ff6000
		text = #05ecc7
	}
}
hashMap {
	name = modus:hashMapName
	desc = modus:hashMapDesc
	hash = hash:vowels
	colors {
		topBg = 0
		bottomBg = 0
		text = 0
	}
}
array {
	name = modus:arrayName
	desc = modus:arrayDesc
	insertion {
		any
	}
	removal {
		any
	}
	colors {
		topBg = #1193d6
		bottomBg = #06b6ff
		text = #fe99ab
	}
}

## Combination moduses
deque {
	name = modus:dequeName
	desc = modus:dequeDesc
	insertion {
		front
		back
	}
	removal {
		front
		back
		skipBlankCards = true
	}
}
hashMapOfStacks {
	name = modus:hashMapOfStacksName
	desc = modus:hashMapOfStacksDesc
	base = hashMap
	nested = stack
}
arrayOfStacks {
	name = modus:arrayOfStacksName
	desc = modus:arrayOfStacksDesc
	base = array
	nested = stack
}
hashMapOfQueues {
	name = modus:hashMapOfQueuesName
	desc = modus:hashMapOfQueuesDesc
	base = hashMap
	nested = queue
}
arrayOfQueues {
	name = modus:arrayOfQueuesName
	desc = modus:arrayOfQueuesDesc
	base = array
	nested = queue
}
arrayOfHashMaps {
	name = modus:arrayOfHashMapsName
	desc = modus:arrayOfHashMapsDesc
	base = array
	nested = hashMap
}
hashMapOfDeques {
	name = modus:hashMapOfDequesName
	desc = modus:hashMapOfDequesDesc
	base = hashMap
	nested = deque
}
arrayOfDeques {
	name = modus:hashMapOfDequesName
	desc = modus:hashMapOfDequesDesc
	base = array
	nested = deque
}
arrayOfHashMapOfStacks {
	name = modus:arrayOfHashMapOfStacksName
	desc = modus:arrayOfHashMapOfStacksDesc
	base = array
	nested = hashMapOfStacks
}
arrayOfHashMapOfQueues {
	name = modus:arrayOfHashMapOfQueuesName
	desc = modus:arrayOfHashMapOfQueuesDesc
	base = array
	nested = hashMapOfQueues
}
arrayOfHashMapOfDeques {
	name = modus:arrayOfHashMapOfDeques
	desc = modus:arrayOfHashMapOfDeques
	base = array
	nested = hashMapOfDeques
}

combinations {
	define {
		in {
			stack
			queue
		}
		out = deque
	}
	define {
		in {
			stack
			hashMap
		}
		out = hashMapOfStacks
	}
	define {
		in {
			stack
			array
		}
		out = arrayOfStacks
	}
	define {
		in {
			queue
			hashMap
		}
		out = hashMapOfQueues
	}
	define {
		in {
			queue
			array
		}
		out = arrayOfQueues
	}
	define {
		in {
			hashMap
			array
		}
		out = arrayOfHashMaps
	}
	define {
		in {
			stack
			queue
			hashMap
		}
		out = hashMapOfDeques
	}
	define {
		in {
			stack
			queue
			array
		}
		out = arrayOfDeques
	}
	define {
		in {
			stack
			hashMap
			array
		}
		out = arrayOfHashMapOfStacks
	}
	define {
		in {
			queue
			hashMap
			array
		}
		out = arrayOfHashMapOfQueues
	}
	define {
		in {
			stack
			queue
			hashMap
			array
		}
		out = arrayOfHashMapOfDeques
	}
}