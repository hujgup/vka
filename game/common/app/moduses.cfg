none {
	name = modus:noneName
	desc = modus:noneDesc
	insertion {
	}
	removal {
	}
}

## Standard moduses
stack {
	name = modus:stackName
	desc = modus:stackDesc
	insertion {
		front
	}	
	removal {
		front
	}
}
queue {
	name = modus:queueName
	desc = modus:queueDesc
	insertion {
		front
	}
	removal {
		back
	}
}
hashMap {
	name = modus:hashMapName
	desc = modus:hashMapDesc
	hash = hash:vowels
}
array {
	name = modus:arrayName
	desc = modus:arrayDesc
	insertion {
		any
	}
	removal {
		any
	}
}

## Combination moduses
deque {
	name = modus:dequeName
	desc = modus:dequeDesc
	insertion {
		front
		back
	}
	removal {
		front
		back
		skipBlankCards = true
	}
}
hashMapOfStacks {
	name = modus:hashMapOfStacksName
	desc = modus:hashMapOfStacksDesc
	hash = hash:vowels
	nested = stack
}

#~
Combination ideas:
stack + queue = deque
stack + hashMap = hashMap of stacks (use hash to determine which stack to put stuff in)
stack + array = array of stacks
queue + hashMap = hashMap of queues
queue + array = array of queues
hashMap + array = array of hashMaps (choose which hashMap to put items in)
TODO: 3 way combinations
~#

combinations {
	define {
		in {
			stack
			queue
		}
		out = deque
	}
}